generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  description   String?
  email         String          @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role          Role?
  createdEvents Event[]         @relation("createdEvents")
  joinedEvents  JoinedEvent[]
  accounts      Account[]
  sessions      Session[]
 
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model Event {
  id              String          @id @default(cuid())
  organizerId     String
  organizerName   String
  title           String
  description     String
  dateTime        DateTime
  duration        String
  location        String
  category        EventCategory   @default(CONFERENCE)
  max_attendees   Int
  status          Status          @default(DRAFT)

  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  organizer       User            @relation("createdEvents", fields: [organizerId], references: [id], onDelete: Cascade)
  attendeesList   JoinedEvent[]
}

model JoinedEvent {
  userId        String
  eventId       String

  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  event         Event           @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@id([userId, eventId])
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}

// Enum List
enum Role {
  PARTICIPANT
  ORGANIZER
}

enum Status {
  DRAFT
  PUBLISHED
}

enum EventCategory {
  CONFERENCE
  WORKSHOP
  CAREER_FAIR
  MEETUP
  HACKATHON
}